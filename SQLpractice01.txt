Write a query to return the 10 earliest orders in the orders table. Include the id, occurred_at, and total_amt_usd.

Write a query to return the top 5 orders in terms of largest total_amt_usd. Include the id, account_id, and total_amt_usd.

Write a query to return the bottom 20 orders in terms of least total. Include the id, account_id, and total.

SELECT id, occurred_at, total_amt_usd
FROM orders
ORDER BY occurred_at
LIMIT 10;

SELECT id, occurred_at, total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC
LIMIT 5;

SELECT id, account_id, total
FROM orders
ORDER BY total
LIMIT 20;
^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv
Vv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^v

Write a query that returns the top 5 rows from orders ordered according to newest to oldest, but with the largest total_amt_usd for each date listed first for each date. You will notice each of these dates shows up as unique because of the time element. When you learn about truncating dates in a later lesson, you will better be able to tackle this question on a day, month, or yearly basis.

Write a query that returns the top 10 rows from orders ordered according to oldest to newest, but with the smallest total_amt_usd for each date listed first for each date. You will notice each of these dates shows up as unique because of the time element. When you learn about truncating dates in a later lesson, you will better be able to tackle this question on a day, month, or yearly basis.

SELECT *
FROM orders
ORDER BY  occurred_at DESC, total_amt_usd DESC
LIMIT 5;

SELECT *
FROM orders
ORDER BY occurred_at, total_amt_usd 
LIMIT 10;
^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv
Vv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^v

Pull the first 5 rows and all columns from the orders table that have a dollar amount of gloss_amt_usd greater than or equal to 1000.

Pull the first 10 rows and all columns from the orders table that have a total_amt_usd less than 500.

SELECT *
FROM orders
WHERE gloss_amt_usd >= 1000
ORDER BY gloss_amt_usd
LIMIT 5;

SELECT *
FROM orders
WHERE total_amt_usd < 500
ORDER BY total_amt_usd DESC
LIMIT 10;
^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv
Vv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^v

Filter the accounts table to include the company name, website, and the primary point of contact (primary_poc) for Exxon Mobil in the accounts table.

SELECT name, website, primary_poc
FROM accounts
WHERE name = 'Exxon Mobil';
^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv
Vv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^v

Using the orders table:
Create a column that divides the standard_amt_usd by the standard_qty to find the unit price for standard paper for each order. Limit the results to the first 10 orders, and include the id and account_id fields.

Write a query that finds the percentage of revenue that comes from poster paper for each order. You will need to use only the columns that end with _usd. (Try to do this without using the total column). Include the id and account_id fields. NOTE - you will be thrown an error with the correct solution to this question. This is for a division by zero. You will learn how to get a solution without an error to this query when you learn about CASE statements in a later section. For now, you might just add some very small value to your denominator as a work around.

Notice, the above operators combine information across columns for the same row. If you want to combine values of a particular column, across multiple rows, we will do this with aggregations. We will get to that before the end of the course!


SELECT 
id,
account_id,
standard_amt_usd, 
standard_qty,
standard_amt_usd / standard_qty AS unit_price 
FROM orders
LIMIT 10;

SELECT *,
(poster_amt_usd / (standard_amt_usd + gloss_amt_usd + poster_amt_usd)) * 100 AS percent_rev
FROM orders
LIMIT 10;

Use the accounts table to find

    All the companies whose names start with 'C'.

    All companies whose names contain the string 'one' somewhere in the name.

    All companies whose names end with 's'.

SELECT name
FROM accounts
WHERE name LIKE 'C%';

SELECT name
FROM accounts
WHERE name LIKE '%1%';

SELECT name
FROM accounts
WHERE name LIKE '%s';

SELECT *,
((standard_amt_usd + gloss_amt_usd + poster_amt_usd) / poster_amt_usd) * 100 AS percent_rev
FROM orders
LIMIT 10;
^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv
Vv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^v

Questions using IN operator

Use the accounts table to find the account name, primary_poc, and sales_rep_id for Walmart, Target, and Nordstrom.

Use the web_events table to find all information regarding individuals who were contacted via the channel of organic or adwords.

SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name IN ('Walmart', 'Target', 'Nordstrom');

SELECT *
FROM web_events
WHERE channel IN ('organic', 'adwords');
^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv
Vv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^v

Questions using the NOT operator

We can pull all of the rows that were excluded from the queries in the previous two concepts with our new operator.
Use the accounts table to find the account name, primary poc, and sales rep id for all stores except Walmart, Target, and Nordstrom.
Use the web_events table to find all information regarding individuals who were contacted via any method except using organic or adwords methods.

Use the accounts table to find:
All the companies whose names do not start with 'C'. 
All companies whose names do not contain the string 'one' somewhere in the name.
All companies whose names do not end with 's'.

SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name NOT IN ('Walmart', 'Target', 'Nordstrom');

SELECT *
FROM web_events
WHERE channel NOT IN ('organic', 'adwords');

SELECT name
FROM accounts
WHERE name NOT LIKE 'C%';

SELECT name
FROM accounts
WHERE name NOT LIKE '%one%';

SELECT name
FROM accounts
WHERE name NOT LIKE '%s';
^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv
Vv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^vVv^v


Questions using AND and BETWEEN operators

    Write a query that returns all the orders where the standard_qty is over 1000, the poster_qty is 0, and the gloss_qty is 0.

    Using the accounts table find all the companies whose names do not start with 'C' and end with 's'.

    Use the web_events table to find all information regarding individuals who were contacted via organic or adwords and started their account at any point in 2016 sorted from newest to oldest.

SELECT standard_qty, poster_qty, gloss_qty
FROM orders
WHERE standard_qty > 1000 AND poster_qty = 0 AND gloss_qty = 0
ORDER BY standard_qty DESC;

SELECT name
FROM accounts
WHERE name NOT LIKE'C%' AND name NOT LIKE '%s'
ORDER BY name;

SELECT *
FROM web_events
WHERE channel IN ('organic', 'adwords') AND occurred_at >= '2016-01-01%'
ORDER BY occurred_at DESC;


Questions using the OR operator

    Find list of orders ids where either gloss_qty or poster_qty is greater than 4000. Only include the id field in the resulting table.

    Write a query that returns a list of orders where the standard_qty is zero and either the gloss_qty or poster_qty is over 1000.

    Find all the company names that start with a 'C' or 'W', and the primary contact contains 'ana' or 'Ana', but it doesn't contain 'eana'.

SELECT id
FROM orders
WHERE gloss_qty > 4000 OR poster_qty > 4000;

SELECT standard_qty, gloss_qty, poster_qty
FROM orders
WHERE (standard_qty = 0 AND gloss_qty = 0) OR poster_qty > 1000;

SELECT *
FROM accounts
WHERE (name LIKE 'C%' OR name LIKE'W%') AND ((primary_poc LIKE '%Ana%' OR primary_poc LIKE '%ana%') AND primary_poc NOT LIKE '%eana%');